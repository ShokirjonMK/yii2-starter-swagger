input {
  # Backend loglarini yig'ish
  file {
    path => "/var/www/html/backend/runtime/logs/*.json"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    type => "backend"
  }

  # Frontend loglarini yig'ish
  file {
    path => "/var/www/html/frontend/runtime/logs/*.json"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    type => "frontend"
  }

  # PostgreSQL loglarini yig'ish
  file {
    path => "/var/lib/postgresql/data/log/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "postgresql"
  }
}

filter {
  # Backend va Frontend loglari uchun filter va grok qoidalari
  if [type] in ["backend", "frontend"] {
    date {
      match => ["@timestamp", "YYYY-MM-dd'T'HH:mm:ss.SSSZ", "ISO8601"]
      target => "@timestamp"
    }
    grok {
      match => { "message" => "\[%{DATA:app_id}\]\[%{DATA:url}\] %{GREEDYDATA:log_message}" }
    }
    # SQL querylarni aniqlash va turini qoâ€˜shish
    if "yii\\db\\Command::query" in [log_message] {
      mutate { add_field => { "log_type" => "sql_query" } }
    }
    # HTTP requestlarni aniqlash va turini qoâ€˜shish
    if "GET" in [log_message] or "POST" in [log_message] {
      mutate { add_field => { "log_type" => "http_request" } }
    }
  }

  # PostgreSQL loglarini pars qilish va vaqtni formatlash
  if [type] == "postgresql" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:log_message}" }
    }
    date {
      match => ["timestamp", "YYYY-MM-dd HH:mm:ss"]
      target => "@timestamp"
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "%{type}-logs-%{+YYYY.MM.dd}"
  }

  stdout {
    codec => rubydebug
  }
}
